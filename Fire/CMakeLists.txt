ADD_SUBDIRECTORY(External)

SET(FIRE_COMPILE_DEFINITIONS)

# Detect Platform
IF (CMAKE_SYSTEM_NAME MATCHES "Linux")
  LIST(APPEND FIRE_COMPILE_DEFINITIONS FIRE_PLATFORM_LINUX)
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Windows")
  LIST(APPEND FIRE_COMPILE_DEFINITIONS FIRE_PLATFORM_WINDOWS)
ELSE()
  MESSAGE(FATAL_ERROR "FATAL: UnSupported Platform")
ENDIF ()

# Detect Compiler
IF(CMAKE_CXX_COMPILER_ID MATCHES GNU)
  LIST(APPEND FIRE_COMPILE_DEFINITIONS FIRE_COMPILER_GNU)
ELSEIF(CMAKE_CXX_COMPILER_ID MATCHES MSVC)
  LIST(APPEND FIRE_COMPILE_DEFINITIONS FIRE_COMPILER_MSVC)
ELSE()
  MESSAGE(FATAL_ERROR "FATAL: UnSupported Compiler")
ENDIF()


OPTION(FIRE_USE_SDL3_WINDOW "Use Sdl3 Window" ON)
OPTION(FIRE_USE_VULKAN_HRI "Use Vulkan HRI" ON)

IF (FIRE_USE_SDL3_WINDOW)
  LIST(APPEND FIRE_COMPILE_DEFINITIONS FIRE_USE_SDL3_WINDOW)
ENDIF()
IF (FIRE_USE_VULKAN_HRI)
  LIST(APPEND FIRE_COMPILE_DEFINITIONS FIRE_USE_VULKAN_HRI)
ENDIF()

LIST(APPEND FIRE_COMPILE_DEFINITIONS FIRE_SHARED_LIBRARY)

ADD_LIBRARY(Fire SHARED)

SET_TARGET_PROPERTIES(Fire
PROPERTIES
  CXX_STANDARD 20
  CXX_EXTENSIONS OFF
  CXX_STANDARD_REQUIRED ON
)

TARGET_COMPILE_DEFINITIONS(Fire
PUBLIC
  ${COMPILE_DEFINITIONS}
  ${FIRE_COMPILE_DEFINITIONS}
)

TARGET_INCLUDE_DIRECTORIES(Fire
PUBLIC
  ${CMAKE_CURRENT_SOURCE_DIR}
)

TARGET_SOURCES(Fire
PUBLIC
  Common.h
  Core/Logger.h
  Core/Logger.cpp
  Core/Trait/OnEventTrait.h
  Core/Trait/OnUpdateTrait.h
  Event/Event.h
  Event/Event.cpp
  Event/WindowEvent.h
  Event/WindowEvent.cpp
  Window/Window.h
  Window/Window.cpp
  Window/Backend/SDL3Window.h
  Window/Backend/SDL3Window.cpp
  HRI/Vulkan/VulkanContext.h
  HRI/Vulkan/VulkanContext.cpp
  Layer/Layer.h
  Layer/Layer.cpp
  Layer/LayerStack.h
  Layer/LayerStack.cpp
  Layer/ImGuiLayer.h
  Layer/ImGuiLayer.cpp
  Core/Application.h
  Core/Application.cpp
)

TARGET_LINK_LIBRARIES(Fire
PUBLIC
  spdlog::spdlog
  SDL3::SDL3-static
  vulkan
  GPUOpen::VulkanMemoryAllocator
  imgui
  glm
  eigen
)
